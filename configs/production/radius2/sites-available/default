######################################################################
#
#	As of 2.0.0, FreeRADIUS supports virtual hosts using the
#	"server" section, and configuration directives.
#
#	Virtual hosts should be put into the "sites-available"
#	directory.  Soft links should be created in the "sites-enabled"
#	directory to these files.  This is done in a normal installation.
#
#	If you are using 802.1X (EAP) authentication, please see also
#	the "inner-tunnel" virtual server.  You will likely have to edit
#	that, too, for authentication to work.
#
#	$Id: b4339bde9e22910fb01159fd89b6a92cbb2cae24 $
#
######################################################################
#
#	Read "man radiusd" before editing this file.  See the section
#	titled DEBUGGING.  It outlines a method where you can quickly
#	obtain the configuration you want, without running into
#	trouble.  See also "man unlang", which documents the format
#	of this file.
#
#	This configuration is designed to work in the widest possible
#	set of circumstances, with the widest possible number of
#	authentication methods.  This means that in general, you should
#	need to make very few changes to this file.
#
#	The best way to configure the server for your local system
#	is to CAREFULLY edit this file.  Most attempts to make large
#	edits to this file will BREAK THE SERVER.  Any edits should
#	be small, and tested by running the server with "radiusd -X".
#	Once the edits have been verified to work, save a copy of these
#	configuration files somewhere.  (e.g. as a "tar" file).  Then,
#	make more edits, and test, as above.
#
#	There are many "commented out" references to modules such
#	as ldap, sql, etc.  These references serve as place-holders.
#	If you need the functionality of that module, then configure
#	it in radiusd.conf, and un-comment the references to it in
#	this file.  In most cases, those small changes will result
#	in the server being able to connect to the DB, and to
#	authenticate users.
#
######################################################################

server default {
#
#  If you want the server to listen on additional addresses, or on
#  additional ports, you can use multiple "listen" sections.
#
#  Each section make the server listen for only one type of packet,
#  therefore authentication and accounting have to be configured in
#  different sections.
#
#  The server ignore all "listen" section if you are using '-i' and '-p'
#  on the command line.
#
	listen {
		#  Type of packets to listen for.
		#  Allowed values are:
		#	auth	listen for authentication packets
		#	acct	listen for accounting packets
		#       auth+acct listen for both authentication and accounting packets
		#	proxy   IP to use for sending proxied packets
		#	detail  Read from the detail file.  For examples, see
		#               raddb/sites-available/copy-acct-to-home-server
		#	status  listen for Status-Server packets.  For examples,
		#		see raddb/sites-available/status
		#	coa     listen for CoA-Request and Disconnect-Request
		#		packets.  For examples, see the file
		#		raddb/sites-available/coa
		#
		type = auth

		#  Note: "type = proxy" lets you control the source IP used for
		#        proxying packets, with some limitations:
		#
		#    * A proxy listener CANNOT be used in a virtual server section.
		#    * You should probably set "port = 0".
		#    * Any "clients" configuration will be ignored.
		#
		#  See also proxy.conf, and the "src_ipaddr" configuration entry
		#  in the sample "home_server" section.  When you specify the
		#  source IP address for packets sent to a home server, the
		#  proxy listeners are automatically created.

		#  ipaddr/ipv4addr/ipv6addr - IP address on which to listen.
		#  If multiple ones are listed, only the first one will
		#  be used, and the others will be ignored.
		#
		#  The configuration options accept the following syntax:
		#
		#  ipv4addr - IPv4 address (e.g.192.0.2.3)
		#  	    - wildcard (i.e. *)
		#  	    - hostname (radius.example.com)
		#  	      Only the A record for the host name is used.
		#	      If there is no A record, an error is returned,
		#	      and the server fails to start.
		#
		#  ipv6addr - IPv6 address (e.g. 2001:db8::1)
		#  	    - wildcard (i.e. *)
		#  	    - hostname (radius.example.com)
		#  	      Only the AAAA record for the host name is used.
		#	      If there is no AAAA record, an error is returned,
		#	      and the server fails to start.
		#
		#  ipaddr   - IPv4 address as above
		#  	    - IPv6 address as above
		#  	    - wildcard (i.e. *), which means IPv4 wildcard.
		#	    - hostname
		#	      If there is only one A or AAAA record returned
		#	      for the host name, it is used.
		#	      If multiple A or AAAA records are returned
		#	      for the host name, only the first one is used.
		#	      If both A and AAAA records are returned
		#	      for the host name, only the A record is used.
		#
		# ipv4addr = *
		# ipv6addr = *
		ipaddr = *

		#  Port on which to listen.
		#  Allowed values are:
		#	integer port number (1812)
		#	0 means "use /etc/services for the proper port"
		port = 0

		#  Some systems support binding to an interface, in addition
		#  to the IP address.  This feature isn't strictly necessary,
		#  but for sites with many IP addresses on one interface,
		#  it's useful to say "listen on all addresses for eth0".
		#
		#  If your system does not support this feature, you will
		#  get an error if you try to use it.
		#
#	interface = eth0

		#  Per-socket lists of clients.  This is a very useful feature.
		#
		#  The name here is a reference to a section elsewhere in
		#  radiusd.conf, or clients.conf.  Having the name as
		#  a reference allows multiple sockets to use the same
		#  set of clients.
		#
		#  If this configuration is used, then the global list of clients
		#  is IGNORED for this "listen" section.  Take care configuring
		#  this feature, to ensure you don't accidentally disable a
		#  client you need.
		#
		#  See clients.conf for the configuration of "per_socket_clients".
		#
#	clients = per_socket_clients

		#
		#  Set the default UDP receive buffer size.  In most cases,
		#  the default values set by the kernel are fine.  However, in
		#  some cases the NASes will send large packets, and many of
		#  them at a time.  It is then possible to overflow the
		#  buffer, causing the kernel to drop packets before they
		#  reach FreeRADIUS.  Increasing the size of the buffer will
		#  avoid these packet drops.
		#
#	recv_buff = 65536

		#
		#  Connection limiting for sockets with "proto = tcp".
		#
		#  This section is ignored for other kinds of sockets.
		#
		limit {
	      #
	      #  Limit the number of simultaneous TCP connections to the socket
	      #
	      #  The default is 16.
	      #  Setting this to 0 means "no limit"
	      max_connections = 16

	      #  The per-socket "max_requests" option does not exist.

	      #
	      #  The lifetime, in seconds, of a TCP connection.  After
	      #  this lifetime, the connection will be closed.
	      #
	      #  Setting this to 0 means "forever".
	      lifetime = 0

	      #
	      #  The idle timeout, in seconds, of a TCP connection.
	      #  If no packets have been received over the connection for
	      #  this time, the connection will be closed.
	      #
	      #  Setting this to 0 means "no timeout".
	      #
	      #  We STRONGLY RECOMMEND that you set an idle timeout.
	      #
	      idle_timeout = 30
	}
}

#
#  This second "listen" section is for listening on the accounting
#  port, too.
#
	listen {
		ipaddr = *
#	ipv6addr = ::
		port = 1813
		type = acct
#	interface = eth0
#	clients = per_socket_clients

		limit {
			#  The number of packets received can be rate limited via the
			#  "max_pps" configuration item.  When it is set, the server
			#  tracks the total number of packets received in the previous
			#  second.  If the count is greater than "max_pps", then the
			#  new packet is silently discarded.  This helps the server
			#  deal with overload situations.
			#
			#  The packets/s counter is tracked in a sliding window.  This
			#  means that the pps calculation is done for the second
			#  before the current packet was received.  NOT for the current
			#  wall-clock second, and NOT for the previous wall-clock second.
			#
			#  Useful values are 0 (no limit), or 100 to 10000.
			#  Values lower than 100 will likely cause the server to ignore
			#  normal traffic.  Few systems are capable of handling more than
			#  10K packets/s.
			#
			#  It is most useful for accounting systems.  Set it to 50%
			#  more than the normal accounting load, and you can be sure that
			#  the server will never get overloaded
			#
#		max_pps = 0

			# Only for "proto = tcp". These are ignored for "udp" sockets.
			#
#		idle_timeout = 0
#		lifetime = 0
#		max_connections = 0
		}
	}

	authorize {
		sql
		pap
	}

	authenticate {
		Auth-Type PAP {
			pap{
				reject = 1
			}

			if (reject) {
				update reply {
					Reply-Message := "Invalid Password."
				}
			}
		}
	}

	preacct {}

	accounting {
		update control {
			&Acct-Attr-Json := "%{json_encode:&request:[*]}"
		}
		sql
	}

	session {}

	post-auth {
		if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
			update reply {
				&User-Name !* ANY
			}
		}
		update {
			&reply: += &session-state:
		}

		Post-Auth-Type REJECT {
			attr_filter.access_reject
		}

		Post-Auth-Type Challenge {

		}

		Post-Auth-Type Client-Lost {

		}
	}

	pre-proxy {}

	post-proxy {}
}
