# -*- text -*-
##
## proxy.conf -- proxy radius and realm configuration directives
##
##      $Id: ec92fb9d51bbc561571f699c5e2c544d7a423b $

#######################################################################
#
#  Proxy server configuration
#
#  This entry controls the servers behaviour towards ALL other servers
#  to which it sends proxy requests.
#
proxy server {
        #
        #  Note that as of 2.0, the "synchronous", "retry_delay",
        #  "retry_count", and "dead_time" have all been deprecated.
        #  For backwards compatibility, they are are still accepted
        #  by the server, but they ONLY apply to the old-style realm
        #  configuration.  i.e. realms with "authhost" and/or "accthost"
        #  entries.
        #
        #  i.e. "retry_delay" and "retry_count" have been replaced
        #  with per-home-server configuration.  See the "home_server"
        #  example below for details.
        #
        #  i.e. "dead_time" has been replaced with a per-home-server
        #  "revive_interval".  We strongly recommend that this not
        #  be used, however.  The new method is much better.

        #
        #  In 2.0, the server is always "synchronous", and setting
        #  "synchronous = no" is impossible.  This simplifies the
        #  server and increases the stability of the network.
        #  However, it means that the server (i.e. proxy) NEVER
        #  originates packets.  It proxies packets ONLY when it receives
        #  a packet or a re-transmission from the NAS.  If the NAS never
        #  re-transmits, the proxy never re-transmits, either.  This can
        #  affect fail-over, where a packet does *not* fail over to a
        #  second home server.. because the NAS never retransmits the
        #  packet.
        #
        #  If you need to set "synchronous = no", please send a
        #  message to the list <freeradius-users@lists.freeradius.org>
        #  explaining why this feature is vital for your network.

        #
        #  If a realm exists, but there are no live home servers for
        #  it, we can fall back to using the "DEFAULT" realm.  This is
        #  most useful for accounting, where the server can proxy
        #  accounting requests to home servers, but if they're down,
        #  use a DEFAULT realm that is LOCAL (i.e. accthost = LOCAL),
        #  and then store the packets in the "detail" file.  That data
        #  can be later proxied to the home servers by radrelay, when
        #  those home servers come back up again.

        #  Setting this to "yes" may have issues for authentication.
        #  i.e. If you are proxying for two different ISP's, and then
        #  act as a general dial-up for Gric.  If one of the first two
        #  ISP's has their RADIUS server go down, you do NOT want to
        #  proxy those requests to GRIC.  Instead, you probably want
        #  to just drop the requests on the floor.  In that case, set
        #  this value to 'no'.
        #
        #  allowed values: {yes, no}
        #
        default_fallback = no

        #
        #  Whether or not we allow dynamic home servers.
        #
        #  This setting should be "no" by default.  If set to "yes",
        #  it can slow the server down, due to mutex locking across
        #  multiple threads.
        #
        #  Dynamic servers will work ONLY with the "directory"
        #  configuration below.
        #
#       dynamic = yes

        #
        #  The directory which contains dynamic home servers.  Each
        #  file in the directory should be a normal "home_server"
        #  definitions.  This directory does not exist by default.
        #
        #  e.g: The content of home_servers/example.com should be
        #  a home server definition.
        #
        #  The name of the home server MUST be the same as the
        #  filename.
        #
        #  Each home server must be set to only one type.  e.g.
        #  "type = auth", and not "type = auth+acct"
        #
        #  For example:
        #
        #       home_server example.com {
        #               type = auth
        #               ipaddr = ...
        #               ...
        #       }
        #
        #  For complete documentation, please see
        #
        #       doc/configuration/dynamic_home_servers.md
        #
#       directory = ${confdir}/home_servers

}

#######################################################################
#
#  Configuration for the proxy realms.
#
#  As of 2.0, the "realm" configuration has changed.  Instead of
#  specifying "authhost" and "accthost" in a realm section, the home
#  servers are specified separately in a "home_server" section.  For
#  backwards compatibility, you can still use the "authhost" and
#  "accthost" directives.  If you only have one home server for a
#  realm, it is easier to use the old-style configuration.
        #
        #  However, if you have multiple servers for a realm, we STRONGLY
        #  suggest moving to the new-style configuration.
        #
        #
        #  Load-balancing and failover between home servers is handled via
        #  a "home_server_pool" section.
        #
        #  Finally, The "realm" section defines the realm, some options, and
        #  indicates which server pool should be used for the realm.
        #
        #  This change means that simple configurations now require multiple
        #  sections to define a realm.  However, complex configurations
        #  are much simpler than before, as multiple realms can share the same
        #  server pool.
        #
        #  That is, realms point to server pools, and server pools point to
        #  home servers.  Multiple realms can point to one server pool.  One
        #  server pool can point to multiple home servers.  Each home server
        #  can appear in one or more pools.
        #
        #  See sites-available/tls for an example of configuring home servers,
        #  pools, and realms with TLS.
        #

######################################################################
#
#  This section defines a "Home Server" which is another RADIUS
#  server that gets sent proxied requests.  In earlier versions
#  of FreeRADIUS, home servers were defined in "realm" sections,
#  which was awkward.  In 2.0, they have been made independent
#  from realms, which is better for a number of reasons.
#
#  You can proxy to a specific home server by doing:
#
#       update control {
#               Home-Server-Name = "name of home server"
#       }
#
#  Backend RADIUS Server 1
home_server radius1 {
        type = auth
        ipaddr = freeradius-radius1
        port = 1812
        secret = testing123
        response_window = 20
        zombie_period = 40
        status_check = status-server
        check_interval = 30
        check_timeout = 4
        num_answers_to_alive = 3
        max_outstanding = 65536
}

#  Backend RADIUS Server 2
home_server radius2 {
        type = auth
        ipaddr = freeradius-radius2
        port = 1812
        secret = testing123
        response_window = 20
        zombie_period = 40
        status_check = status-server
        check_interval = 30
        check_timeout = 4
        num_answers_to_alive = 3
        max_outstanding = 65536
}

#  Backend RADIUS Server 3
home_server radius3 {
        type = auth
        ipaddr = freeradius-radius3
        port = 1812
        secret = testing123
        response_window = 20
        zombie_period = 40
        status_check = status-server
        check_interval = 30
        check_timeout = 4
        num_answers_to_alive = 3
        max_outstanding = 65536
}

######################################################################
#
#  This section defines a pool of home servers that is used
#  for fail-over and load-balancing.  In earlier versions of
#  FreeRADIUS, fail-over and load-balancing were defined per-realm.
#  As a result, if a server had 5 home servers, each of which served
#  the same 10 realms, you would need 50 "realm" entries.
#
#  In version 2.0, you would need 5 "home_server" sections,
#  10 'realm" sections, and one "home_server_pool" section to tie the
#  two together.
#
#  You can proxy to a specific home server pool by doing:
#
#       update control {
#               Home-Server-Pool = "name of pool"
#       }
#
#  Load balancing pool for backend RADIUS servers
home_server_pool radius_backend_pool {
        type = load-balance
        home_server = radius1
        home_server = radius2
        home_server = radius3
}

#  Failover pool for backend RADIUS servers
home_server_pool radius_failover_pool {
        type = fail-over
        home_server = radius1
        home_server = radius2
        home_server = radius3
}

######################################################################
#
#
#  This section defines a new-style "realm".  Note the in version 2.0,
#  there are many fewer configuration items than in 1.x for a realm.
#
#  Automatic proxying is done via the "realms" module (see "man
#  rlm_realm").  To manually proxy the request put this entry in the
#  "users" file:

#
#
#DEFAULT        Proxy-To-Realm := "realm_name"
#
#
#  Default realm for all requests - proxy to backend RADIUS servers
realm DEFAULT {
        auth_pool = radius1
        acct_pool = radius2
}

#  Local realm for requests that should not be proxied
realm LOCAL {
        #  If we do not specify a server pool, the realm is LOCAL, and
        #  requests are not proxied to it.
}

#  Example realm for testing
realm example.com {
        auth_pool = radius_backend_pool
        acct_pool = radius_backend_pool
} 